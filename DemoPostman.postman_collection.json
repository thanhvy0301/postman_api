{
	"info": {
		"_postman_id": "c4d93c9c-1641-4237-a011-0dc02ea89a9d",
		"name": "DemoPostman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31294932"
	},
	"item": [
		{
			"name": "[API_CreateBooking]",
			"item": [
				{
					"name": "[Test Body Request] Null Key's Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"createStatus\", pm.response.code);\r",
									"var getTcName = pm.collectionVariables.get(\"testCaseName\");\r",
									"if(getTcName === \"[Test Body Request] Null Key's Value\") {\r",
									"    if(pm.response.code === 200){\r",
									"        let actualCode = pm.response.code;\r",
									"        console.log(\"Actual Code: \" + actualCode);\r",
									"\r",
									"        // Lấy mã trạng thái kỳ vọng từ biến collection\r",
									"        let expectedCode = parseInt(pm.collectionVariables.get(\"expectedCode\"), 10);\r",
									"        console.log(\"Expected Code: \" + expectedCode);\r",
									"\r",
									"        // Kiểm tra mã trạng thái phản hồi với mã trạng thái kỳ vọng\r",
									"        pm.test(\"Status code\", function () {    \r",
									"            pm.expect(actualCode).to.eql(expectedCode);\r",
									"        });\r",
									"        let jsonData = pm.response.json();  // Chuyển phản hồi thành đối tượng JSON\r",
									"        let bookingId = jsonData.bookingid; // Lấy giá trị bookingId từ phản hồi\r",
									"        pm.collectionVariables.set(\"bookingId\", bookingId);\r",
									"    }else{\r",
									"        pm.test(\"Status code is 400\", function () {\r",
									"            pm.response.to.have.status(400);\r",
									"        });\r",
									"    }    \r",
									"}else{    \r",
									"    console.log(\"execution stopped !\")\r",
									"}\r",
									"\r",
									"    \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"[Test Body Request] Null Key's Value ---------------------------------------------\");\r",
									"\r",
									"// Xóa giá trị của các biến nếu không rỗng\r",
									"clearVariableIfNotEmpty(\"bookingId\");\r",
									"clearVariableIfNotEmpty(\"testCaseName\"); \r",
									"clearVariableIfNotEmpty(\"stCodeCreate\"); \r",
									"\r",
									"// Lấy tên API từ CSV\r",
									"var getTcName = pm.iterationData.get(\"TestCaseName\");\r",
									"// Đọc body từ request\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"// Kiểm tra nếu TestCaseName khác '[Test Body] Null Key's Value'\r",
									"if (getTcName !== \"[Test Body Request] Null Key's Value\") {\r",
									"    console.log(`TestCaseName: ${getTcName} does not match '[Test Body] Null Key's Value'. Stopping execution.`);\r",
									"    pm.execution.skipRequest() ; // Dừng việc thực hiện request tiếp theo\r",
									"} else {\r",
									"    pm.collectionVariables.set(\"testCaseName\", getTcName);\r",
									"    console.log(\"testCaseName is saved: \" + getTcName);\r",
									"    if (requestBody) {\r",
									"        savedValueCsvIntoVariable();\r",
									"        console.log(\"All variables have been saved.\");\r",
									"    } else {\r",
									"        console.log(\"Request body is empty.\");\r",
									"    }\r",
									"}\r",
									"\r",
									"function savedValueCsvIntoVariable() {\r",
									"    // Mảng chứa các cặp tên biến và tên cột trong CSV\r",
									"    \r",
									"    const variables = [\r",
									"        // {variableName: \"testCaseName\", csvColumn: \"TestCaseName\"},\r",
									"        { variableName: \"firstName\", csvColumn: \"firstName\" },\r",
									"        { variableName: \"lastName\", csvColumn: \"lastName\" },\r",
									"        { variableName: \"totalPrice\", csvColumn: \"totalPrice\" },\r",
									"        { variableName: \"depositPaid\", csvColumn: \"depositPaid\" },\r",
									"        { variableName: \"checkinDate\", csvColumn: \"checkinDate\" },\r",
									"        { variableName: \"checkoutDate\", csvColumn: \"checkoutDate\" },\r",
									"        { variableName: \"addNeed\", csvColumn: \"additionNeeds\" },\r",
									"        { variableName: \"expectedCode\", csvColumn: \"expectedCode\" }\r",
									"    ];\r",
									"\r",
									"    // Vòng lặp để lưu biến từ iteration data\r",
									"    for (let i = 0; i < variables.length; i++) {\r",
									"        const item = variables[i];\r",
									"        const value = pm.iterationData.get(item.csvColumn);\r",
									"        // Lưu biến nếu giá trị không phải là null, undefined, hoặc chuỗi rỗng\r",
									"        if (value !== null && value !== undefined && value !== '') {\r",
									"            pm.collectionVariables.set(item.variableName, value);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"// Hàm clear biến trước khi call\r",
									"function clearVariableIfNotEmpty(variableName) {\r",
									"    var variableValue = pm.collectionVariables.get(variableName);\r",
									"    if (variableValue) {\r",
									"        console.log(\"Testcase name current: \"+ variableValue );\r",
									"        var del = pm.collectionVariables.set(variableName, \"\");\r",
									"        console.log(\"Deleted Testcase Name: \" + del);\r",
									"    } else {\r",
									"        console.log(`The variable '${variableName}' is already empty.`);\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n    \"checkin\" : \"{{checkinDate}}\",\r\n    \"checkout\" : \"{{checkoutDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{addNeed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Test Body Request] Nul Body Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    pm.test(\"Status code is 500\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"    });\r",
									"    console.log(\"Status: \" + pm.response.status);\r",
									"    // Thiết lập request tiếp theo nếu mã trạng thái là 500\r",
									"    pm.execution.setNextRequest(\"[Test Body Request] Null keys (Require)\");\r",
									"} catch (e) {\r",
									"    console.error(\"Error: \" + e);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"[Test Body] Nul Body Request ---------------------------------------------\");\r",
									"var getTcName = pm.iterationData.get(\"TestCaseName\");\r",
									"// // Đọc body từ request\r",
									"var requestBody = pm.request.body.raw;\r",
									"// Kiểm tra nếu TestCaseName khác '[Test Body] Null Key's Value'\r",
									"if (getTcName !== \"[Test Body Request] Nul Body Request\") {\r",
									"    console.log(`TestCaseName: ${getTcName} does not match '[Test Body Request] Nul Body Request'. Stopping execution.`);\r",
									"    pm.execution.skipRequest() ; // Dừng việc thực hiện request tiếp theo\r",
									"    return; // Kết thúc script tại đây để ngăn việc thực hiện thêm request\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Test Body Request] Null keys (Require)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"console.log(\"Status: \" + pm.response.status);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"[Test Body Request] Null keys (Require) ---------------------------------------------\");\r",
									"var getTcName = pm.iterationData.get(\"TestCaseName\");\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"// Xóa giá trị của các biến nếu không rỗng\r",
									"clearAllVariables();\r",
									"\r",
									"// Kiểm tra nếu TestCaseName khác '[Test Body Request] Null keys (Not Require)'\r",
									"if (getTcName !== \"[Test Body Request] Null keys (Require)\") {\r",
									"    console.log(`TestCaseName: ${getTcName} does not match '[Test Body Request] Null keys (Require)'. Stopping execution`);\r",
									"    pm.execution.skipRequest(); // Dừng việc thực hiện request tiếp theo\r",
									"    return; // Kết thúc script tại đây để ngăn việc thực hiện thêm request\r",
									"} else {\r",
									"    savedValueCsvIntoVariable();\r",
									"    removeKeysWithUndefinedValues();\r",
									"}\r",
									"\r",
									"function savedValueCsvIntoVariable() {\r",
									"    // Mảng chứa các cặp tên biến và tên cột trong CSV    \r",
									"    const variables = [\r",
									"        { variableName: \"firstName\", csvColumn: \"firstName\" },\r",
									"        { variableName: \"lastName\", csvColumn: \"lastName\" },\r",
									"        { variableName: \"totalPrice\", csvColumn: \"totalPrice\" },\r",
									"        { variableName: \"depositPaid\", csvColumn: \"depositPaid\" },\r",
									"        { variableName: \"checkinDate\", csvColumn: \"checkinDate\" },\r",
									"        { variableName: \"checkoutDate\", csvColumn: \"checkoutDate\" },\r",
									"        { variableName: \"addNeed\", csvColumn: \"additionNeeds\" },\r",
									"        { variableName: \"expectedCode\", csvColumn: \"expectedCode\" }\r",
									"    ];\r",
									"\r",
									"    // Vòng lặp để lưu biến từ iteration data\r",
									"    for (let i = 0; i < variables.length; i++) {\r",
									"        const item = variables[i];\r",
									"        const value = pm.iterationData.get(item.csvColumn);\r",
									"        // Lưu biến nếu giá trị không phải là null, undefined, hoặc chuỗi rỗng\r",
									"        if (value !== undefined && value !== null && value !== \"\") {\r",
									"            pm.collectionVariables.set(item.variableName, value);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// Hàm xóa một thuộc tính cụ thể khỏi body JSON nếu giá trị của nó là undefined\r",
									"function removeKeysWithUndefinedValues() {\r",
									"    // Thay thế các biến trong requestBody\r",
									"    let resolvedRequestBody = pm.variables.replaceIn(requestBody);\r",
									"\r",
									"    try {\r",
									"        // Chuyển đổi body JSON thành đối tượng\r",
									"        let bodyObj = JSON.parse(resolvedRequestBody);\r",
									"\r",
									"        function checkAndRemoveKeys(obj) {\r",
									"            for (let key in obj) {\r",
									"                if (obj.hasOwnProperty(key)) {\r",
									"                    const value = obj[key];\r",
									"                    \r",
									"                    // Xóa khóa nếu giá trị không hợp lệ\r",
									"                    if (value === undefined || value === null || value === \"\" || (typeof value === 'object' && Object.keys(value).length === 0)) {\r",
									"                        delete obj[key];\r",
									"                        console.log(`Removed key with invalid value: ${key}`);\r",
									"                    } else if (typeof value === 'object' && value !== null) {\r",
									"                        // Nếu là một đối tượng, xử lý đệ quy\r",
									"                        checkAndRemoveKeys(value);\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Xử lý các khóa từ đối tượng body\r",
									"        checkAndRemoveKeys(bodyObj);\r",
									"\r",
									"        // Chuyển đổi lại đối tượng thành chuỗi JSON và cập nhật body request\r",
									"        pm.request.body.raw = JSON.stringify(bodyObj);\r",
									"        console.log(\"Body after deleting keys: \" + pm.request.body.raw);\r",
									"    } catch (error) {\r",
									"        console.error(\"Error parsing JSON: \", error);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Hàm clear biến trước khi call\r",
									"function clearAllVariables() {\r",
									"    // Lấy tất cả các biến trong pm.collectionVariables\r",
									"    const allVariables = pm.collectionVariables.toObject();\r",
									"\r",
									"    // Duyệt qua tất cả các biến\r",
									"    for (const variableName in allVariables) {\r",
									"        if (allVariables.hasOwnProperty(variableName)) {            \r",
									"            pm.collectionVariables.set(variableName, \"\"); // Xóa giá trị            \r",
									"        }\r",
									"    }\r",
									"    console.log(\"Deleted all values !\");\r",
									"}\r",
									"\r",
									"// Gọi hàm để xóa tất cả các giá trị của biến\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n    \"checkin\" : \"{{checkinDate}}\",\r\n    \"checkout\" : \"{{checkoutDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{addNeed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Test Body Request] Null keys (Not Require)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"Status: \" + pm.response.status);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"[Test Body Request] Null keys (Not Require) ---------------------------------------------\");\r",
									"var getTcName = pm.iterationData.get(\"TestCaseName\");\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"// Xóa giá trị của các biến nếu không rỗng\r",
									"clearAllVariables();\r",
									"\r",
									"// Kiểm tra nếu TestCaseName khác '[Test Body Request] Null keys (Not Require)'\r",
									"if (getTcName !== \"[Test Body Request] Null keys (Not Require)\") {\r",
									"    console.log(`TestCaseName: ${getTcName} does not match '[Test Body Request] Null keys (Not Require)'. Stopping execution`);\r",
									"    pm.execution.skipRequest(); // Dừng việc thực hiện request tiếp theo\r",
									"    return; // Kết thúc script tại đây để ngăn việc thực hiện thêm request\r",
									"} else {\r",
									"    savedValueCsvIntoVariable();\r",
									"    removeKeysWithUndefinedValues();\r",
									"}\r",
									"\r",
									"function savedValueCsvIntoVariable() {\r",
									"    // Mảng chứa các cặp tên biến và tên cột trong CSV    \r",
									"    const variables = [\r",
									"        { variableName: \"firstName\", csvColumn: \"firstName\" },\r",
									"        { variableName: \"lastName\", csvColumn: \"lastName\" },\r",
									"        { variableName: \"totalPrice\", csvColumn: \"totalPrice\" },\r",
									"        { variableName: \"depositPaid\", csvColumn: \"depositPaid\" },\r",
									"        { variableName: \"checkinDate\", csvColumn: \"checkinDate\" },\r",
									"        { variableName: \"checkoutDate\", csvColumn: \"checkoutDate\" },\r",
									"        { variableName: \"addNeed\", csvColumn: \"additionNeeds\" },\r",
									"        { variableName: \"expectedCode\", csvColumn: \"expectedCode\" }\r",
									"    ];\r",
									"\r",
									"    // Vòng lặp để lưu biến từ iteration data\r",
									"    for (let i = 0; i < variables.length; i++) {\r",
									"        const item = variables[i];\r",
									"        const value = pm.iterationData.get(item.csvColumn);\r",
									"        // Lưu biến nếu giá trị không phải là null, undefined, hoặc chuỗi rỗng\r",
									"        if (value !== undefined && value !== null && value !== \"\") {\r",
									"            pm.collectionVariables.set(item.variableName, value);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// Hàm xóa một thuộc tính cụ thể khỏi body JSON nếu giá trị của nó là undefined\r",
									"function removeKeysWithUndefinedValues() {\r",
									"    // Thay thế các biến trong requestBody\r",
									"    let resolvedRequestBody = pm.variables.replaceIn(requestBody);\r",
									"\r",
									"    try {\r",
									"        // Chuyển đổi body JSON thành đối tượng\r",
									"        let bodyObj = JSON.parse(resolvedRequestBody);\r",
									"\r",
									"        function checkAndRemoveKeys(obj) {\r",
									"            for (let key in obj) {\r",
									"                if (obj.hasOwnProperty(key)) {\r",
									"                    const value = obj[key];\r",
									"                    \r",
									"                    // Xóa khóa nếu giá trị không hợp lệ\r",
									"                    if (value === undefined || value === null || value === \"\" || (typeof value === 'object' && Object.keys(value).length === 0)) {\r",
									"                        delete obj[key];\r",
									"                        console.log(`Removed key with invalid value: ${key}`);\r",
									"                    } else if (typeof value === 'object' && value !== null) {\r",
									"                        // Nếu là một đối tượng, xử lý đệ quy\r",
									"                        checkAndRemoveKeys(value);\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Xử lý các khóa từ đối tượng body\r",
									"        checkAndRemoveKeys(bodyObj);\r",
									"\r",
									"        // Chuyển đổi lại đối tượng thành chuỗi JSON và cập nhật body request\r",
									"        pm.request.body.raw = JSON.stringify(bodyObj);\r",
									"        console.log(\"Body after deleting keys: \" + pm.request.body.raw);\r",
									"    } catch (error) {\r",
									"        console.error(\"Error parsing JSON: \", error);\r",
									"    }\r",
									"}\r",
									"\r",
									"function clearAllVariables() {\r",
									"    // Lấy tất cả các biến trong pm.collectionVariables\r",
									"    const allVariables = pm.collectionVariables.toObject();\r",
									"\r",
									"    // Duyệt qua tất cả các biến\r",
									"    for (const variableName in allVariables) {\r",
									"        if (allVariables.hasOwnProperty(variableName)) {            \r",
									"            pm.collectionVariables.set(variableName, \"\"); // Xóa giá trị            \r",
									"        }\r",
									"    }\r",
									"    console.log(\"Deleted all values !\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n    \"checkin\" : \"{{checkinDate}}\",\r\n    \"checkout\" : \"{{checkoutDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{addNeed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testCaseName",
			"value": ""
		},
		{
			"key": "depositPaid",
			"value": ""
		},
		{
			"key": "expectedCode",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "totalPrice",
			"value": ""
		},
		{
			"key": "checkinDate",
			"value": ""
		},
		{
			"key": "checkoutDate",
			"value": ""
		},
		{
			"key": "addNeed",
			"value": ""
		},
		{
			"key": "bookingId",
			"value": ""
		}
	]
}